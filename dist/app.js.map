{"version":3,"sources":["../server/app.js"],"names":["app","use","json","urlencoded","extended","secret","process","env","SECRET_KEY","resave","saveUninitialized","initialize","session","req","res","next","err","Error","status","get","send","message","error","set","PORT","createServer","listen","console","log"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;AAEA;;AAGA;;;;AACA;;;;;;AAEA;;;AAJA;;;AALA;AAUA,IAAMA,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAD,IAAIC,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACAF,IAAIC,GAAJ,CAAQ,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAJ,IAAIC,GAAJ,CAAQ,iCAAR;AACAD,IAAIC,GAAJ,CAAQ,6BAAR;AACAD,IAAIC,GAAJ,CAAQ,8BAAQ;AACZI,YAAQC,QAAQC,GAAR,CAAYC,UADR;AAEZC,YAAQ,KAFI;AAGZC,uBAAmB;AAHP,CAAR,CAAR;;AAMA;AACAV,IAAIC,GAAJ,CAAQ,mBAASU,UAAT,EAAR;AACAX,IAAIC,GAAJ,CAAQ,mBAASW,OAAT,EAAR;;AAEAZ,IAAIC,GAAJ,CAAQ,GAAR;AACAD,IAAIC,GAAJ,CAAQ,MAAR;;AAEA;AACAD,IAAIC,GAAJ,CAAQ,UAACY,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB,QAAMC,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAZ;AACAD,QAAIE,MAAJ,GAAa,GAAb;AACAH,SAAKC,GAAL;AACH,CAJD;;AAMA;;AAEA;AACA;AACA,IAAIhB,IAAImB,GAAJ,CAAQ,KAAR,MAAmB,aAAvB,EAAsC;AAClCnB,QAAIC,GAAJ,CAAQ,UAACe,GAAD,EAAMH,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7BD,YAAII,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAJ,YAAIM,IAAJ,CAAS;AACLC,qBAASL,IAAIK,OADR;AAELC,mBAAON;AAFF,SAAT;AAIH,KAND;AAOH;;AAED;AACA;AACAhB,IAAIC,GAAJ,CAAQ,UAACe,GAAD,EAAMH,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC7BD,QAAII,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAJ,QAAIM,IAAJ,CAAS;AACLC,iBAASL,IAAIK,OADR;AAELC,eAAO;AAFF,KAAT;AAIH,CAND;;AAQAtB,IAAIuB,GAAJ,CAAQ,MAAR,EAAgBjB,QAAQC,GAAR,CAAYiB,IAAZ,IAAoB,IAApC;AACA,eAAKC,YAAL,CAAkBzB,GAAlB,EAAuB0B,MAAvB,CAA8B1B,IAAImB,GAAJ,CAAQ,MAAR,CAA9B,EAA+C,YAAM;AACjDQ,YAAQC,GAAR,uCAAgD5B,IAAImB,GAAJ,CAAQ,MAAR,CAAhD;AACH,CAFD;;kBAIenB,G","file":"app.js","sourcesContent":["import express from 'express';\r\nimport logger from 'morgan';\r\nimport cookieParser from 'cookie-parser';\r\nimport bodyParser from 'body-parser';\r\nimport session from 'express-session';\r\nimport expressValidator from 'express-validator';\r\nimport passport from 'passport';\r\nimport http from 'http';\r\n\r\n// load environment variables with dotenv\r\nimport 'dotenv/config';\r\n\r\nimport './auth/passport';\r\n\r\n/* Routes */\r\nimport routes from './routes/index';\r\nimport api from './routes/api';\r\n\r\n// Express Instance\r\nconst app = express();\r\n\r\napp.use(logger('dev'));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(expressValidator());\r\napp.use(cookieParser());\r\napp.use(session({\r\n    secret: process.env.SECRET_KEY,\r\n    resave: false,\r\n    saveUninitialized: true\r\n}));\r\n\r\n/* Initialize passport */\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\n\r\napp.use('/', routes);\r\napp.use('/api', api);\r\n\r\n// catch 404 and forward to error handler\r\napp.use((req, res, next) => {\r\n    const err = new Error('Not Found');\r\n    err.status = 404;\r\n    next(err);\r\n});\r\n\r\n// error handlers\r\n\r\n// development error handler\r\n// will print stacktrace\r\nif (app.get('env') === 'development') {\r\n    app.use((err, req, res, next) => {\r\n        res.status(err.status || 500);\r\n        res.send({\r\n            message: err.message,\r\n            error: err\r\n        });\r\n    });\r\n}\r\n\r\n// production error handler\r\n// no stacktraces leaked to user\r\napp.use((err, req, res, next) => {\r\n    res.status(err.status || 500);\r\n    res.send({\r\n        message: err.message,\r\n        error: {}\r\n    });\r\n});\r\n\r\napp.set('port', process.env.PORT || 3000);\r\nhttp.createServer(app).listen(app.get('port'), () => {\r\n    console.log(`Express server listening on port ${app.get('port')}`);\r\n});\r\n\r\nexport default app;\r\n"]}