{"version":3,"sources":["../../server/controllers/booksController.js"],"names":["BooksController","add","req","res","checkBody","notEmpty","isInt","getValidationResult","then","result","isEmpty","status","json","data","array","newBook","isbn","body","title","author","published","qty","Book","create","book","catch","err","send","errors","update","bookId","params","findById","updateBook","description","retrieveAll","all","books","retrieve","parseInt","borrow","userId","Inventory","inventory","return","findOne","where","query","returned","findAll"],"mappings":"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","file":"booksController.js","sourcesContent":["import db from '../models';\r\n\r\nconst BooksController = {\r\n    /* Add Book */\r\n    add: (req, res) => {\r\n        // Validate input\r\n        req.checkBody('isbn', 'ISBN required').notEmpty().isInt();\r\n        req.checkBody('title', 'Title required').notEmpty();\r\n        req.checkBody('author', 'Author required').notEmpty();\r\n        req.checkBody('published', 'Published date required').notEmpty();\r\n        req.checkBody('qty', 'QTY required').notEmpty().isInt();\r\n\r\n        // Validation result\r\n        req.getValidationResult().then((result) => {\r\n            if (!result.isEmpty()) {\r\n                res.status(400)\r\n                    .json({ status: 'Validation error', data: result.array() });\r\n            }\r\n\r\n            const newBook = {\r\n                isbn: req.body.isbn,\r\n                title: req.body.title,\r\n                author: req.body.author,\r\n                published: req.body.published,\r\n                qty: req.body.qty\r\n            };\r\n\r\n            db.Book\r\n                .create(newBook)\r\n                .then((book) => {\r\n                    res.status(201).json({\r\n                        status: 'success',\r\n                        data: book\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    res.status(400).send(err.errors);\r\n                });\r\n        });\r\n    },\r\n\r\n    /* Update book */\r\n    update: (req, res) => {\r\n        const bookId = req.params.bookId;\r\n\r\n        db.Book\r\n            .findById(bookId)\r\n            .then((book) => {\r\n                if (!book) {\r\n                    res.status(404).send({ status: 'Not found' });\r\n                }\r\n\r\n                const updateBook = {\r\n                    isbn: req.body.isbn || book.isbn,\r\n                    title: req.body.title || book.title,\r\n                    author: req.body.author || book.author,\r\n                    published: req.body.published || book.published,\r\n                    description: req.body.description || book.description,\r\n                    qty: req.body.qty || book.isbn\r\n                };\r\n                return book\r\n                    .update(updateBook)\r\n                    .then(() => {\r\n                        res.status(200).send({\r\n                            status: 'success',\r\n                            data: book\r\n                        });\r\n                    })\r\n                    .catch(err => res.status(400).send(err.errors));\r\n            });\r\n    },\r\n\r\n    /* Retrieve all books */\r\n    retrieveAll: (req, res) => {\r\n        db.Book.all()\r\n            .then((books) => { res.send(books); })\r\n            .catch((err) => { res.send(err.errors); });\r\n    },\r\n\r\n    /* Retrieve single book */\r\n    retrieve: (req, res) => {\r\n        const bookId = parseInt(req.params.bookId, 10);\r\n        db.Book\r\n            .findById(bookId)\r\n            .then((book) => {\r\n                if (!book) return res.status(404).send({ status: 'Not found' });\r\n                res.status(200).send(book);\r\n            })\r\n            .catch((err) => { res.status(400).send(err.errors); });\r\n    },\r\n\r\n    /* Borrow book */\r\n    borrow: (req, res) => {\r\n        const userId = parseInt(req.params.userId, 10);\r\n        const bookId = req.body.bookId;\r\n\r\n        db.Book\r\n            .findById(bookId)\r\n            .then((book) => {\r\n                if (!book) return res.status(404).send({ status: 'Not found' });\r\n                // TODO: associate\r\n                db.Inventory\r\n                    .create({\r\n                        userId,\r\n                        bookId\r\n                    })\r\n                    .then((inventory) => {\r\n                        res.status(200).send(inventory);\r\n                    });\r\n            })\r\n            .catch(err => res.status(400).send(err.errors));\r\n    },\r\n\r\n    /* Return borrowed books */\r\n    return: (req, res) => {\r\n        const bookId = parseInt(req.body.bookId, 10);\r\n        db.Inventory\r\n            .findOne({ where: { bookId } })\r\n            .then((book) => {\r\n                if (!book) return res.status(404).send({ status: 'Not found' });\r\n                book\r\n                    .update({ return: true })\r\n                    .then(() => {\r\n                        res.status(200).send({ status: 'returned' });\r\n                    })\r\n                    .catch(err => res.status(400).send(err.errors));\r\n            });\r\n    },\r\n\r\n    /* Get books borrowed by user */\r\n    inventory: (req, res) => {\r\n        if (req.query.returned) {\r\n            return db.Inventory\r\n                .findAll({\r\n                    where: {\r\n                        userId: req.params.userId,\r\n                        return: req.query.returned\r\n                    }\r\n                })\r\n                .then((books) => { res.send(books); })\r\n                .catch((err) => { res.send(err); });\r\n        }\r\n        db.Inventory\r\n            .findAll({ where: { userId: req.params.userId } })\r\n            .then((books) => { res.send(books); })\r\n            .catch((err) => { res.send(err.errors); });\r\n    }\r\n};\r\n\r\nexport default BooksController;\r\n"]}