{"version":3,"sources":["../../server/models/index.js"],"names":["basename","module","filename","env","process","NODE_ENV","config","require","db","sequelize","use_env_variable","database","username","password","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","join","name","Object","keys","modelName","associate","Sequelize"],"mappings":";;;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,IAAMA,WAAW,eAAKA,QAAL,CAAcC,OAAOC,QAArB,CAAjB,C,CALA;;AAMA,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACA,IAAMC,SAASC,QAAQ,oCAAR,EAA8CJ,GAA9C,CAAf;AACA,IAAMK,KAAK,EAAX;;AAEA,IAAIC,kBAAJ;AACA,IAAIH,OAAOI,gBAAX,EAA6B;AACzBD,gBAAY,yBAAcL,QAAQD,GAAR,CAAYG,OAAOI,gBAAnB,CAAd,CAAZ;AACH,CAFD,MAEO;AACHD,gBAAY,yBAAcH,OAAOK,QAArB,EAA+BL,OAAOM,QAAtC,EAAgDN,OAAOO,QAAvD,EAAiEP,MAAjE,CAAZ;AACH;;AAED,aACKQ,WADL,CACiBC,SADjB,EAEKC,MAFL,CAEY,UAACC,IAAD,EAAU;AACd,WAAQA,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAASjB,QAAvC,IAAqDiB,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAA/E;AACH,CAJL,EAKKC,OALL,CAKa,UAACH,IAAD,EAAU;AACf,QAAMI,QAAQZ,UAAU,QAAV,EAAoB,eAAKa,IAAL,CAAUP,SAAV,EAAqBE,IAArB,CAApB,CAAd;AACAT,OAAGa,MAAME,IAAT,IAAiBF,KAAjB;AACH,CARL;;AAUAG,OAAOC,IAAP,CAAYjB,EAAZ,EAAgBY,OAAhB,CAAwB,UAACM,SAAD,EAAe;AACnC,QAAIlB,GAAGkB,SAAH,EAAcC,SAAlB,EAA6B;AACzBnB,WAAGkB,SAAH,EAAcC,SAAd,CAAwBnB,EAAxB;AACH;AACJ,CAJD;;AAMAA,GAAGC,SAAH,GAAeA,SAAf;AACAD,GAAGoB,SAAH;;kBAEepB,E","file":"index.js","sourcesContent":["/* eslint-disable */\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { Sequelize } from 'sequelize';\r\n\r\nconst basename = path.basename(module.filename);\r\nconst env = process.env.NODE_ENV || 'development';\r\nconst config = require('../../server/db/config/config.json')[env];\r\nconst db = {};\r\n\r\nlet sequelize;\r\nif (config.use_env_variable) {\r\n    sequelize = new Sequelize(process.env[config.use_env_variable]);\r\n} else {\r\n    sequelize = new Sequelize(config.database, config.username, config.password, config);\r\n}\r\n\r\nfs\r\n    .readdirSync(__dirname)\r\n    .filter((file) => {\r\n        return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');\r\n    })\r\n    .forEach((file) => {\r\n        const model = sequelize['import'](path.join(__dirname, file));\r\n        db[model.name] = model;\r\n    });\r\n\r\nObject.keys(db).forEach((modelName) => {\r\n    if (db[modelName].associate) {\r\n        db[modelName].associate(db);\r\n    }\r\n});\r\n\r\ndb.sequelize = sequelize;\r\ndb.Sequelize = Sequelize;\r\n\r\nexport default db;\r\n"]}